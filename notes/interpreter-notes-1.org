#+Title: 解释器笔记（1）：一点基本的知识

最近又重拾了解释器的相关内容，最开始看解释器是大一上学期的时候，从SICP中入门的，然后从网上看了挺多的写解释器的文章，但是后来好久没有看，现在已经基本忘光了，所以为了以后容易回忆起相关内容，写点笔记记录一下。

* 解释器与编译器
:PROPERTIES:
:ID:       71D44CCD-D731-42D2-B5D0-A589C9B2DCB1
:PUBDATE:  <2015-12-15 Tue 22:05>
:END:
- 解释器（Interpreter）
  Wikipedia上的解释如下：
  #+BEGIN_EXAMPLE
  In computer science, an interpreter is a computer program that directly executes, i.e. performs, instructions written in a programming or scripting language, without previously compiling them into a machine language program. An interpreter generally uses one of the following strategies for program execution:

  1. parse the source code and perform its behavior directly.
  2. translate source code into some efficient intermediate representation and immediately execute this.
  3. explicitly execute stored precompiled code[1] made by a compiler which is part of the interpreter system.
  #+END_EXAMPLE
  
  简单来说，解释器可以当做一个黑盒程序，输入是源代码，输出是结果，中间的执行过程可以是多样的，只要实现了程序的语义就行（具体怎么实现有三种，参见wikipedia）。

- 编译器（Compiler）
  Wikipedia上的解释如下：
  #+BEGIN_EXAMPLE
  A compiler is a computer program (or a set of programs) that transforms source code written in a programming language (the source language) into another computer language (the target language), with the latter often having a binary form known as object code.[1] The most common reason for converting source code is to create an executable program.
  #+END_EXAMPLE

  简单来说，就是将一种程序语言（源代码）转换到另一种程序语言（目标代码），然后执行目标代码，目标代码只能在特定平台上运行，比如说x86汇编代码（x86 assembly language）就只能在Intel 8008架构的平台上运行。要实现跨平台的目的，可以通过虚拟机（virtual machine）来完成，通过将源代码编译成运行在虚拟机上的字节码（Bytecode），然后在虚拟机上执行，这也是一种解释的过程。

这里不过多地讲编译器的内容，毕竟是写的解释器的笔记。

一种语言既可以使用解释器来解释，也可以使用编译器来编译，常见的使用解释器的语言（例如Python），也有编译器的实现（例如Nuitka），所以说一门语言是「解释型语言」或者「编译型语言」是不准确的。
* 解释器的工作原理
:PROPERTIES:
:ID:       DB07C1D0-5B4D-41FB-9C9F-E51C95AD0411
:PUBDATE:  <2015-12-15 Tue 22:05>
:END:
这里并不打算太深入地写，所以拿一个简单的表达式计算器作为例子。

例如我们需要解释 ~1 + 2~ 这个简单地字符串。

最开始需要做什么？首先肯定是要知道每一部分都属于什么，比如 =1= 是个数字， =+= 是一个运算符，这一步叫做词法分析，在解释器中，完成这一过程的代码叫做词法分析器（lexical ananlyzer, 简称lexer；还有其他叫法，例如：tokenier，scanner），这一步的目的是把字符串拆分成一个个的token，每个token对应一个类型和一个值，例如 =1= 这个token就对应 =(Integer, 1)= 。

通过词法分析之后，我们会得到一串单词流，接下来的一步就是在这串单词流里面找到一种特定的结构，例如满足 =integer + integer= 这种结构，这一步就叫做语法分析（parsing），解释器中用来完成这种功能的代码，叫做语法分析器（parser）。解析出表达式之后就可以直接计算得出结果了。

光看理论会感觉挺简单地，但是上手写代码还是会遇到不少问题，即使是个只能计算类似于 =1 + 1= 这样的简单解释器。下面就用Python来构造一个简单地解释器，这个解释器可以支持简单的二元加减法运算。

首先上 =main()= 函数：

#+BEGIN_SRC python
  def main():
      while True:
          try:
              # 读取字符串
              text = input('>>> ')
          except EOFError:
              break
          if not text:
              continue

          # 构造一个Interpreter对象
          interpreter = Interpreter(text)
          # 经过tokenizer和parser之后得到结果
          result = interpreter.expr()
          print(result)
#+END_SRC

然后来实现一下Interpreter这个类，这个类中应该包含了tokenizer和parser。

tokenizer的实现原理就是依次扫描字符串，遇到空格跳过，遇到字符串结尾停止扫描，遇到数字返回一个数字类型的token，遇到运算符返回一个运算符类型的token。所以我们需要一个表，来对应每种token的类型和值。

#+BEGIN_SRC python
  INTEGER = 'INTEGER'
  PLUS = 'PLUS'
  MINUS = 'MINUS'
  EOF = 'EOF'

  def Token(object):
      def __init__(self, type, value):
          self.type = type
          self.value = value

      def __str__(self):
          return '({type}, {value})'.format(type = self.type, value = self.value)

      def __repr__(self):
          return self.__str__()
#+END_SRC

ok，现在可以来实现Interpreter类了。

#+BEGIN_SRC python
  def Interpreter(object):
      def __init__(self, text):
          self.text = text
          self.pos = 0 # pos指针用来扫描text，初始化时指向第一个字符
          self.current_token = None # current_token指针用来指向当前的token，初始化时为None
          self.current_char = self.text[self.pos] # current_char指针用来指向当前的字符

      def error(self):
          raise Exception('Error parsing input')

#+END_SRC
* 参考资料
:PROPERTIES:
:ID:       FECF1C72-BA4D-49DD-9EC5-0DF20685FCDF
:PUBDATE:  <2015-12-15 Tue 22:05>
:END:
- 虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩：http://rednaxelafx.iteye.com/blog/492667
- Interpreter (computing)：https://en.wikipedia.org/wiki/Interpreter_(computing)
- Compiler：https://en.wikipedia.org/wiki/Compiler
- x86 assembly language：https://en.wikipedia.org/wiki/X86_assembly_language
- Nuitka：http://nuitka.net/pages/overview.html
- Symbol table：https://en.wikipedia.org/wiki/Symbol_table
- Let’s Build A Simple Interpreter. Part 1：http://ruslanspivak.com/lsbasi-part1/
