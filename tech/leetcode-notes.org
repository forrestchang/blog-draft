#+Title: LeetCode 解题笔记
* Array
** Remove Duplicates from Sorted Array [Easy]
#+BEGIN_EXAMPLE
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.
#+END_EXAMPLE

题目的大概意思就是删除掉已排序数组中的重复元素，相当于一个 =set= 的操作。比较暴力的算法就是直接从第一个开始扫描，然后依次把重复的去掉，这样显然时间复杂度就上去了。考虑到数组已经排好序，所以有 ~nums[i+1] >= nums[i]~ ，使用两个index来作为指示，代码如下：

#+BEGIN_SRC python
  def removeDuplicates(nums):
      # 数组长度为0的话直接返回0
      if len(nums) == 0:
          return 0

      # 设定两个index，back指向key value，front指向待扫描的元素
      back = 0
      front = 1
      for front in range(1, len(nums)):
          # 如果nums[front] != nums[back]，则将front处的元素复制到back后面来
          if nums[front] != nums[back]:
              nums[front + 1] = nums[back]
              front += 1
      return front + 1
#+END_SRC

另外一种方法是使用Python自带的 =set= 操作，但是 =set= 之后的数组可能是乱序的，所以还需要再排一下序，代码如下：

#+BEGIN_SRC python
  def removeDuplicates(nums):
      # 因为题目要求in place，所以需要在原数组的基础上进行set，而list(set(nums))会generage一个新的数组
      nums[:] = list(set(nums))
      nums.sort()
      return len(nums)
#+END_SRC

需要注意的是Python中的list过程会生成一个新的数组，而不是直接在原数组上进行操作，这不符合题目的要求。

第二种方法比第一种方法快一些，但是还是没有达到LeetCode上最快的方法，更好地算法还需要再想一想。
** Remove Element [Easy]
#+BEGIN_EXAMPLE
Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.
#+END_EXAMPLE

这道题和 =Remove Duplicates from Sorted Array= 差不多，都可以用两个index来解决，代码如下:

#+BEGIN_SRC python
  def removeElement(nums, val):
      if len(nums) == 0:
          return 0
      # 因为要把所有符合条件的val删掉，所以要从第一个开始扫描
      back = -1
      front = 0
      for front in range(0, len(nums)):
          if nums[front] != val:
              nums[back + 1] = nums[front]
              back += 1
      return back + 1
#+END_SRC

另外一种方法就是使用Python内置的一些函数来完成，但是题目要求in place，所以这种方法不太符合要求（但是可以通过），代码如下：

#+BEGIN_SRC python
  def removeElement(nums, val):
      if len(nums) == 0:
          return 0
      temp = []
      for value in nums:
          if value != val:
              temp.append(value)
      nums[:] = temp
      return len(nums)

#+END_SRC
